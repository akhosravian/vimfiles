"Andrew Khosravian's .vimrc
let mapleader = " "

"Pathogen
execute pathogen#infect()
syntax on
filetype plugin indent on

" ***********************************
" *     settings!                   *
" ***********************************
set shiftwidth=4
set tabstop=4
set noexpandtab
set smartcase
set ignorecase
set hlsearch
set incsearch

" Hide buffers instead of closing them (allows buffer swapping without saving)
set hidden

"Move the preview window to the bottom of the screen
set splitbelow

let g:netrw_liststyle=3 " better file explorer style

set statusline=   " clear the statusline for when vimrc is reloaded
set statusline+=%-4.4n\                      " buffer number
set statusline+=%f\                          " file name
set statusline+=%h%m%r%w                     " flags
set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
set statusline+=%{&fileformat}]              " file format
set statusline+=%=                           " right align
set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  " highlight
set statusline+=%b,0x%-8B\                   " current char
set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset

set laststatus=2 " show status line even with a single window

" fix cursor shape in windows terminal
if &term =~ "xterm"
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[3 q"
    let &t_EI = "\<Esc>[2 q"
endif

colors zenburn

"Map space to disable search highlights (without changing other functionality)
nnoremap <space> :noh<return><esc>

"Tab navigation
nnoremap <C-j> :tabprevious<CR>
nnoremap <C-k> :tabnext<CR>

"store temporary files not in a non annoying location
if has("unix")
	set directory=~/.vim/tmp/
else
	set directory=%TMP%
endif

set viminfo+=n~/.vim/viminfo

"Change the default font
if has("unix")
	set gfn=Meslo\ LG\ M\ for\ Powerline:h14
else
	set gfn=Consolas:h10:cANSI
endif

" ***********************************
" *     vimrc manipulation          *
" ***********************************
if has("unix")
	map <leader>V :sp ~/.vim/vimrc<CR><C-W>_
	map <silent> <leader>v :source ~/.vim/vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
else
	map <leader>V :sp ~/vimfiles/vimrc<CR><C-W>_
	map <silent> <leader>v :source ~/vimfiles/vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
endif

" ***********************************
" * Filesystem browsing             *
" ***********************************
map <leader>W :exe ":lcd %:p:h"<CR>:exe ":echo 'changed pwd to current buffers'"<CR>

function! OPEN_FILEBROWSER_CURR_BUFFER()
	if has("unix")
	":h filename-modifiers
	"%:p = full path & file
	"%:p:h = full path
	"%:t = filename only
		exe "!open -R " . expand("%:p:h")
	else
		exe "!start explorer " . expand("%:p:h")
	endif
endfunction
map <leader>T :exe OPEN_FILEBROWSER_CURR_BUFFER()<CR><CR>

map [q :cprev<CR>
map ]q :cnext<CR>
map <leader>q :cclose<CR>
map <leader>Q :copen<CR>

set wildignore+=*.meta

" ***********************************
" * brew install the_silver_searcher*
" ***********************************
if executable('ag')
	" Use ag over grep
	set grepprg=ag\ --vimgrep\ $* 
	set grepformat=%f:%l:%c:%m

	" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
	let g:ctrlp_user_command = 'ag %s --files-with-matches --nocolor --follow -g ""'

	" ag is fast enough that CtrlP doesn't need to cache
	let g:ctrlp_use_caching = 0

	function! SilentGrep(args) abort
		let cmd = "silent !(ag --silent --vimgrep " . shellescape(a:args) . " >| ~/.vim/tmp/qf.txt)"
		silent! execute cmd
		cgetfile ~/.vim/tmp/qf.txt
		cwindow
		redraw!
	endfunction

	nnoremap <leader>g :Ag \b<C-R><C-W>\b<CR>

	command! -nargs=+ -complete=file Ag call SilentGrep(<q-args>)
	nnoremap \ :Ag<SPACE>
endif

" ***********************************
" *         Perforce                *
" ***********************************
function! P4EditCurrentFile() 
	if has("unix")
		exe "!p4 edit \"%\""
	else
		exe "!start p4 edit \"%\""
	endif
endfunction
map <leader>e :exe P4EditCurrentFile()<CR>:exe ":echo 'opened file for edit'"<CR>:e %<CR>
map <leader>E :bufdo exe P4EditCurrentFile()<CR>:bufdo exe ":e"<CR>

function! P4RevertCurrentFile() 
	if exists("b:p4path")
		let l:p4error = system("p4 revert \"" . b:p4path . "\"")
		echom l:p4error
		if l:p4error =~ 'was edit, reverted'
			set readonly
		else
			echoe l:p4error
		endif
	else
		if has("unix")
			exe "!p4 revert %"
		else
			exe "!start p4 revert %"
		endif
		echo 'reverted file'
	endif
endfunction
map <leader>R :call P4RevertCurrentFile()<cr>

" Set a buffer-local variable to the perforce path, if this file is under the
" perforce root.
function! IsUnderPerforce()
	let l:where = system("p4 where " . expand("%:p"))
	if v:shell_error == 0
		let b:p4path = substitute(l:where, "\\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\).*", "\\4", "")
	endif
endfunction

" Checkout a file from perforce.
function! P4Checkout()
	if exists("b:p4path")
		let l:p4error = system("p4 edit \"" . b:p4path . "\"")
		echom l:p4error
		if l:p4error =~ 'opened for edit'
			set noreadonly
		else
			echoe l:p4error
		endif
	endif
endfunction

command! FormatJSON %!python -m json.tool

augroup p4cmds
	autocmd!
	autocmd BufEnter * call IsUnderPerforce()
	autocmd FileChangedRO * call P4Checkout()
	autocmd BufWritePre * :if &readonly | call P4Checkout() | :endif
augroup END

" ***********************************
" *         Language Specific       *
" ***********************************
augroup python_js_language_settings
	autocmd!
	" Should move this stuff to a ftplugin file
	autocmd FileType python setlocal expandtab tabstop=8 shiftwidth=4 softtabstop=4
	autocmd FileType javascript setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=0
augroup END

" ***********************************
" *         Plugin settings         *
" ***********************************

" YouCompleteMe
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_confirm_extra_conf = 0

augroup ycm_commands
	autocmd!

	autocmd FileType c,cpp,objc,objcpp,python,cs nnoremap <c-]> :YcmCompleter GoTo<cr>
	autocmd FileType c,cpp,objc,objcpp,python,cs nnoremap <leader>b :silent YcmForceCompileAndDiagnostics<cr>
augroup END

" vim-windowswap
let g:windowswap_map_keys = 0 "prevent default bindings
nnoremap <silent> <leader>yw :call WindowSwap#MarkWindowSwap()<CR>
nnoremap <silent> <leader>pw :call WindowSwap#DoWindowSwap()<CR>
nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>

" CtrlP
let g:ctrlp_root_markers = ['.p4ignore']
